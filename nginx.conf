worker_processes 1;

events {
	worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    tcp_nopush on;
    tcp_nodelay on;
    sendfile on;
    keepalive_timeout  65;
    gzip off;
    gzip_disable "msie6"
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    server {
        listen 80;

	location ~* ^/hls/([c-z])/(.*)$ {
            alias /tmp/hls/$1/$2;
            index index.m3u8;
            autoindex on;
            add_header Access-Control-Allow-Origin *;
            add_header Cache-Control no-cache;
        }

	location ~* ^/dash/([c-z])/(.*)$ {
            root /tmp/dash/$1/$2/;
            index index.mpd;
            autoindex on;
            add_header Access-Control-Allow-Origin *;
            add_header Cache-Control no-cache;
        }

        # We enable the control module so that SLUG apps can control recordings
	location /control { 
            # https://github.com/arut/nginx-rtmp-module/wiki/Directives#rtmp_control
	    rtmp_control all;
	}

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /static;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}

# RTMP configuration
rtmp_auto_push off;
rtmp_auto_push_reconnect 100s;
rtmp {
   
    server {

	listen 1935; # Listen on standard RTMP port and 
	timeout 60;
        chunk_size 6144;   #Default x1.5 
        buflen 500ms;    

        # Conversion Apps Publish Here #  
        # USECASE: Watching HDHomeRun Prime without an additional app
        application c {
            live on;
            meta copy;
	    interleave on;
            wait_key on;
            wait_video on;
            respawn off;
            drop_idle_publisher 10s;
            publish_notify on;
            idle_streams on;

            allow publish 127.0.0.1;
            allow play all;

            exec_play bash -c "echo \"$addr\" > /dev/stdout";
            exec_publish bash -c "echo \"$addr\" > /dev/stdout";
            exec_publish_done bash -c "echo \"Publishing complete on stream $name\" > /dev/stdout";

	    ## /vagrant/bistorm/iot/hdhomerun/channel initiates transcoding.
	    ##  Then, when we receive transcoded MP4, send to HLS 
	    
            # Send our feed to the matching HLS application (RTMP to HLS)
            exec_push bash -c "ffmpeg -i rtmp://localhost/c/$name -codec copy -f flv rtmp://localhost/hlsc/$name";
            
        }

        # Desktop Apps Publish Here # 
        # USECASE: Using a single-threaded MP4 stream for Live Web Streaming
        #  Publishes to both hlsd and dashd apps for multi-bitrate streaming
        application d {
            live on;
            interleave on;
            wait_key off;
            respawn on;
            idle_streams on;

            exec_play bash -c "echo \"$addr\" > /dev/stdout";
            exec_publish bash -c "echo \"$addr\" > /dev/stdout";

            # Send our feed to HLS and DASH applications
            exec_push bash -c "ffmpeg -i rtmp://localhost/d/$name -codec copy -f flv rtmp://localhost/hlsd/$name -codec copy -f flv rtmp://localhost/dashd/$name";
            
            allow publish all;
            allow play all;
        }

        # USECASE: Recorder
        #   1. vCumulus makes a request to stream/record shell script via SLUG with args = [action,app_id,stream_name]
        #   2. Shell script uses ffmpeg to get original stream and republish to r.
        #   3. r app recording is dropped through /control/drop/client?app=r&name=stream_name
	application r {
            live on;
            meta copy;
            wait_key on;
            wait_video on;
            allow publish 127.0.0.1;
            allow play 127.0.0.1;
            idle_streams off;
            record_append on;
            record_lock on;
            respawn off;

            # Recording with append
            recorder all {
                record all manual;
                record_unique off;
                record_path /media/video; 
            }
        }

        # USECASE: Timeshift recorder
        #   1. vCumulus makes a request to a shell script via SLUG with args = [action,app_id,stream_name]
        #   2. Shell script uses ffmpeg to get original stream and republish to t.
        #   3. .flv files are individually converted and appended through X^nDir scripts
	application t {
            live on;
            meta copy;
	    interleave on;
            wait_key on;
            wait_video on;
            allow publish all;
            allow play all;
            idle_streams off;
            record_lock on;

            # Timeshifting
            recorder timeshift {
                record all manual;
                record_interval 15s;
                record_unique off;
                record_suffix .flv;
                record_path /media/video/raw/timeshift; 
            }

        }

        # HLS processing on the c application
	application hlsc {
            live on;
	    interleave on;
            hls on;
            hls_path "/tmp/hls/c";
            hls_fragment 5;
            hls_nested on;
            hls_playlist_length 120;
	    hls_cleanup on;
            hls_continuous on;
            allow publish 127.0.0.1;
            allow play all;
            idle_streams on;
        }

        # HLS processing on the d application
	application hlsd {
            live on;
	    interleave on;
            wait_key on;
            hls on;
            hls_path "/tmp/hls/d";
            hls_fragment 3;
            hls_nested on;
            hls_playlist_length 10;
	    hls_cleanup on;
            hls_continuous on;
            allow publish all;
            allow play all;
            idle_streams on;
	}

        # HLS processing on the c application
	application dashc {
	    live on;
	    interleave on;
            wait_key on;
            dash on;
            dash_nested on;
            dash_path "/tmp/dash/c";
            dash_fragment 6;
            dash_playlist_length 60;
	    dash_cleanup on;
            allow publish all;
            allow play all;
            idle_streams off;
	}

        # HLS processing on the d application
	application dashd {
	    live on;
	    interleave on;
            wait_key on;
            dash on;
            dash_nested on;
            dash_path "/tmp/dash/d";
            dash_fragment 6;
            dash_playlist_length 60;
	    dash_cleanup on;
            allow publish all;
            allow play all;
            idle_streams off;
	}

    }
}  
